generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String
  password String

  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()
  finishedAt DateTime? @db.Timestamptz()

  @@map("user")
}

model Match {
  id String @id @default(uuid())

  name        String
  description String?
  type        MatchType

  matchTeam MatchTeam[]

  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()
  finishedAt DateTime? @db.Timestamptz()

  @@map("match")
}

enum MatchType {
  NORMAL
  TOURNAMENT
}

model Player {
  id String @id @default(uuid())

  name       String   @unique @db.VarChar(150)
  nickname   String?  @db.VarChar(150)
  instagram  String?  @db.VarChar(150)
  isOnGuild  Boolean? @default(false)
  isMember   Boolean? @default(false)
  totalKills Int      @default(0)

  playerTeam PlayerTeam[]

  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()
  finishedAt DateTime? @db.Timestamptz()

  @@map("player")
}

model PlayerTeam {
  id String @id @default(uuid())

  player   Player @relation(fields: [playerId], references: [id])
  playerId String

  matchTeam   MatchTeam @relation(fields: [matchTeamId], references: [id])
  matchTeamId String

  kill Int

  @@map("player_team")
}

model MatchTeam {
  id String @id @default(uuid())

  match   Match  @relation(fields: [matchId], references: [id])
  matchId String

  playerTeam PlayerTeam[]

  position Int

  @@map("match_team")
}
